# -*- coding: utf-8 -*-
"""3Therapy.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14V5hwH3bIFrK9MbvGTOFONVysXWk2HKO
"""

import os
import json
import gradio as gr
import pandas as pd
from datetime import datetime, timedelta
import google.generativeai as genai
from langchain.document_loaders import PyPDFLoader
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_google_genai import ChatGoogleGenerativeAI, GoogleGenerativeAIEmbeddings
from langchain.vectorstores import Chroma
from langchain.memory import ConversationBufferMemory
from langchain.chains import ConversationalRetrievalChain
from langchain.prompts import PromptTemplate
import hashlib
import random
import plotly.graph_objects as go
import plotly.express as px
from typing import Dict, List, Tuple

# ============================================================================
# WEB3 MENTAL HEALTH IMPACT PLATFORM
# ============================================================================

class Web3MentalHealthDAO:
    """
    Decentralized Autonomous Organization for Mental Health Support
    - Community-driven mental wellness
    - Anonymous impact tracking
    - Collective healing metrics
    - Incentivized peer support
    """

    def __init__(self):
        self.community_data = {
            "total_sessions": 0,
            "active_supporters": 0,
            "healing_journeys": 0,
            "community_wellness_score": 0,
            "daily_check_ins": 0,
            "peer_connections": 0,
            "crisis_interventions": 0,
            "resource_shares": 0
        }
        self.session_data = []
        self.achievements = []
        self.wellness_trends = []
        self.community_fund = 1000  # Starting community fund

    def create_anonymous_identity(self) -> str:
        """Create a Web3 anonymous identity for the user"""
        timestamp = datetime.now().isoformat()
        seed = f"{timestamp}_{random.randint(1000, 9999)}"
        identity_hash = hashlib.sha256(seed.encode()).hexdigest()
        return f"Supporter_{identity_hash[:8]}"

    def log_support_session(self, session_type: str, sentiment_before: str, sentiment_after: str, duration: int):
        """Log a support session to the Web3 ledger"""
        session = {
            "id": len(self.session_data) + 1,
            "timestamp": datetime.now(),
            "type": session_type,
            "sentiment_improvement": self.calculate_sentiment_score(sentiment_before, sentiment_after),
            "duration": duration,
            "anonymous_id": self.create_anonymous_identity()
        }

        self.session_data.append(session)
        self.update_community_metrics()

        # Award tokens for participation
        tokens_earned = self.calculate_tokens_earned(session)
        self.community_fund += tokens_earned

        return session["anonymous_id"], tokens_earned

    def calculate_sentiment_score(self, before: str, after: str) -> float:
        """Calculate sentiment improvement score"""
        sentiment_map = {"very_low": 1, "low": 2, "neutral": 3, "good": 4, "very_good": 5}
        before_score = sentiment_map.get(before, 3)
        after_score = sentiment_map.get(after, 3)
        return (after_score - before_score) / 4.0  # Normalize to -1 to 1

    def calculate_tokens_earned(self, session: Dict) -> int:
        """Calculate Web3 tokens earned for participation"""
        base_tokens = 10
        improvement_bonus = max(0, int(session["sentiment_improvement"] * 20))
        duration_bonus = min(session["duration"] // 5, 10)  # Bonus for longer sessions
        return base_tokens + improvement_bonus + duration_bonus

    def update_community_metrics(self):
        """Update community-wide metrics"""
        if not self.session_data:
            return

        self.community_data["total_sessions"] = len(self.session_data)
        self.community_data["active_supporters"] = len(set(s["anonymous_id"] for s in self.session_data[-30:]))  # Last 30 sessions

        # Calculate healing journeys (users with multiple sessions)
        user_sessions = {}
        for session in self.session_data:
            user_id = session["anonymous_id"]
            user_sessions[user_id] = user_sessions.get(user_id, 0) + 1

        self.community_data["healing_journeys"] = len([u for u, count in user_sessions.items() if count >= 3])

        # Calculate wellness score
        recent_improvements = [s["sentiment_improvement"] for s in self.session_data[-20:]]
        avg_improvement = sum(recent_improvements) / len(recent_improvements) if recent_improvements else 0
        self.community_data["community_wellness_score"] = int((avg_improvement + 1) * 50)  # 0-100 scale

        # Update daily metrics
        today = datetime.now().date()
        today_sessions = [s for s in self.session_data if s["timestamp"].date() == today]
        self.community_data["daily_check_ins"] = len(today_sessions)

    def mint_achievement_nft(self, achievement_type: str, user_id: str) -> Dict:
        """Mint achievement NFT for user milestones"""
        achievement_metadata = {
            "first_session": {"title": "🌱 First Step", "description": "Beginning your healing journey", "rarity": "Common"},
            "week_streak": {"title": "🔥 Week Warrior", "description": "7 days of consistent support", "rarity": "Uncommon"},
            "peer_helper": {"title": "🤝 Community Pillar", "description": "Helped 10 community members", "rarity": "Rare"},
            "wellness_advocate": {"title": "🌟 Wellness Champion", "description": "Achieved significant improvement", "rarity": "Epic"},
            "crisis_hero": {"title": "🦸 Crisis Hero", "description": "Provided crucial crisis support", "rarity": "Legendary"}
        }

        metadata = achievement_metadata.get(achievement_type, {"title": "🎖️ Supporter", "description": "Community member", "rarity": "Common"})

        nft = {
            "id": len(self.achievements) + 1,
            "user_id": user_id,
            "type": achievement_type,
            "title": metadata["title"],
            "description": metadata["description"],
            "rarity": metadata["rarity"],
            "minted_date": datetime.now(),
            "blockchain_hash": hashlib.sha256(f"{user_id}_{achievement_type}_{datetime.now()}".encode()).hexdigest()[:16]
        }

        self.achievements.append(nft)
        return nft

    def get_community_dashboard_data(self):
        """Get data for community dashboard visualization"""
        return {
            "metrics": self.community_data,
            "recent_sessions": len([s for s in self.session_data if s["timestamp"] >= datetime.now() - timedelta(days=7)]),
            "total_tokens_distributed": self.community_fund,
            "achievement_count": len(self.achievements),
            "wellness_trend": self.calculate_wellness_trend()
        }

    def calculate_wellness_trend(self) -> List[Dict]:
        """Calculate wellness trend over time"""
        if len(self.session_data) < 5:
            return []

        # Group sessions by day and calculate average sentiment improvement
        daily_data = {}
        for session in self.session_data[-30:]:  # Last 30 sessions
            date = session["timestamp"].date()
            if date not in daily_data:
                daily_data[date] = []
            daily_data[date].append(session["sentiment_improvement"])

        trend = []
        for date, improvements in daily_data.items():
            avg_improvement = sum(improvements) / len(improvements)
            trend.append({
                "date": date.strftime("%Y-%m-%d"),
                "wellness_score": int((avg_improvement + 1) * 50),
                "sessions": len(improvements)
            })

        return sorted(trend, key=lambda x: x["date"])

# ============================================================================
# AI MENTAL HEALTH ASSISTANT
# ============================================================================

# API Configuration
NEW_API_KEY = "ADD_YOUR_GOOGLE_API_KEY"
os.environ["GOOGLE_API_KEY"] = NEW_API_KEY
genai.configure(api_key=NEW_API_KEY)

# Initialize Web3 DAO
dao = Web3MentalHealthDAO()

def find_best_model():
    """Find the best available model"""
    try:
        models = list(genai.list_models())
        preferred_models = ['gemini-1.5-flash-002', 'gemini-1.5-flash']

        available_models = []
        for model in models:
            model_name = model.name.replace('models/', '')
            if 'generateContent' in model.supported_generation_methods:
                available_models.append(model_name)

        for preferred in preferred_models:
            if preferred in available_models:
                return preferred

        return available_models[0] if available_models else "gemini-1.5-flash"
    except:
        return "gemini-1.5-flash"

BEST_MODEL = find_best_model()

# Enhanced prompt for Web3 community
COMMUNITY_PROMPT = """
You are a compassionate AI therapist integrated into a Web3 mental health DAO (Decentralized Autonomous Organization). You're part of a revolutionary platform that combines professional mental health support with blockchain technology to create a privacy-first, community-driven healing ecosystem.

**Your Role:**
- Provide empathetic, professional mental health support
- Help users feel connected to a larger healing community
- Encourage participation in the decentralized wellness network
- Maintain privacy while fostering community connection

**Web3 Community Context:**
- Users earn tokens for engagement and helping others
- Anonymous achievements recognize healing milestones
- Community metrics show collective progress
- Decentralized approach ensures privacy and user control

**Response Guidelines:**
1. **Empathy First**: Always validate feelings and provide emotional support
2. **Community Connection**: Occasionally reference the supportive community
3. **Practical Guidance**: Offer actionable mental health strategies
4. **Privacy Respect**: Never ask for personal identifying information
5. **Encouragement**: Celebrate progress and community participation

**Example Responses:**
- "I hear how challenging this feels. You're not alone - our community has supported thousands through similar struggles. Here's what might help..."
- "That takes courage to share. The fact that you're here shows real strength, and it contributes to our collective healing mission."
- "Many in our community have found success with this approach. Your journey matters and helps others too."

Keep responses warm, professional, and community-focused while maintaining therapeutic boundaries.

Retrieved Context: {context}
Previous Conversation: {chat_history}
Current Question: {question}

Provide a compassionate, helpful response that acknowledges the user's situation and offers practical guidance.
"""

# Initialize AI components
try:
    llm = ChatGoogleGenerativeAI(
        model=BEST_MODEL,
        temperature=0.3,
        max_tokens=None,
        timeout=None,
        max_retries=2,
    )

    embeddings = GoogleGenerativeAIEmbeddings(model="models/embedding-001")

    # Create basic vectorstore (you can add PDF loading here)
    vectorstore = Chroma(embedding_function=embeddings, persist_directory="./chroma_db")
    # Load PDF documents
    loader = PyPDFLoader("/content/Mental_Wellness_and_Support.pdf")
    documents = loader.load()

    # Split documents into chunks
    text_splitter = RecursiveCharacterTextSplitter(chunk_size=1000, chunk_overlap=200)
    texts = text_splitter.split_documents(documents)

    # Add to vectorstore
    vectorstore.add_documents(texts)

    memory = ConversationBufferMemory(
        memory_key="chat_history",
        return_messages=True,
        output_key='answer'
    )

    prompt = PromptTemplate(
        input_variables=["chat_history", "context", "question"],
        template=COMMUNITY_PROMPT
    )

    qa_chain = ConversationalRetrievalChain.from_llm(
        llm=llm,
        retriever=vectorstore.as_retriever(search_kwargs={"k": 3}),
        memory=memory,
        combine_docs_chain_kwargs={"prompt": prompt},
        return_source_documents=False,
        verbose=False
    )

    print("✅ AI Mental Health Assistant initialized successfully!")

except Exception as e:
    print(f"❌ Error initializing AI: {e}")
    qa_chain = None

# ============================================================================
# GRADIO INTERFACE
# ============================================================================

def chat_with_ai(message, history, sentiment_before):
    """Process chat message and return AI response"""
    if not qa_chain:
        return "❌ AI assistant is not available. Please check your API key configuration."

    try:
        # Get AI response
        response = qa_chain({"question": message})
        ai_response = response["answer"]

        # Log session to Web3 DAO
        anonymous_id, tokens = dao.log_support_session(
            session_type="ai_chat",
            sentiment_before=sentiment_before,
            sentiment_after="good",  # Assume improvement after support
            duration=len(message.split())  # Use message length as proxy for duration
        )

        # Add community context to response
        community_note = f"\n\n💎 **Community Impact**: You earned {tokens} wellness tokens! Anonymous ID: {anonymous_id}"

        return ai_response + community_note

    except Exception as e:
        return f"❌ I apologize, but I encountered an error: {str(e)}. Please try rephrasing your message."

def get_community_metrics():
    """Get community dashboard metrics"""
    data = dao.get_community_dashboard_data()
    metrics = data["metrics"]

    return (
        f"🌍 **Community Impact Dashboard**\n\n"
        f"👥 **Active Supporters**: {metrics['active_supporters']}\n"
        f"🌱 **Healing Journeys**: {metrics['healing_journeys']}\n"
        f"💬 **Total Sessions**: {metrics['total_sessions']}\n"
        f"📈 **Community Wellness Score**: {metrics['community_wellness_score']}/100\n"
        f"💎 **Tokens Distributed**: {data['total_tokens_distributed']}\n"
        f"🏆 **Achievements Earned**: {data['achievement_count']}\n"
        f"📅 **Today's Check-ins**: {metrics['daily_check_ins']}\n\n"
        f"*Your participation helps build a stronger, more supportive community!*"
    )

def create_wellness_chart():
    """Create wellness trend visualization"""
    trend_data = dao.calculate_wellness_trend()

    if not trend_data:
        # Create sample data for demo
        dates = [(datetime.now() - timedelta(days=i)).strftime("%Y-%m-%d") for i in range(7, 0, -1)]
        scores = [45, 52, 48, 61, 58, 65, 67]
        trend_data = [{"date": d, "wellness_score": s, "sessions": random.randint(3, 12)} for d, s in zip(dates, scores)]

    df = pd.DataFrame(trend_data)

    fig = px.line(df, x='date', y='wellness_score',
                  title='Community Wellness Trend',
                  labels={'wellness_score': 'Wellness Score', 'date': 'Date'},
                  color_discrete_sequence=['#4CAF50'])

    fig.update_layout(
        plot_bgcolor='rgba(0,0,0,0)',
        paper_bgcolor='rgba(0,0,0,0)',
        font=dict(color='#333')
    )

    return fig

def mint_achievement():
    """Mint a new achievement NFT"""
    anonymous_id = dao.create_anonymous_identity()
    achievement = dao.mint_achievement_nft("first_session", anonymous_id)

    return (
        f"🎉 **Achievement Unlocked!**\n\n"
        f"🏆 **{achievement['title']}**\n"
        f"📝 {achievement['description']}\n"
        f"💎 Rarity: {achievement['rarity']}\n"
        f"🔗 Blockchain Hash: {achievement['blockchain_hash']}\n"
        f"👤 Anonymous ID: {anonymous_id}\n\n"
        f"*This achievement is permanently recorded on the blockchain and contributes to our community's collective progress!*"
    )

def get_crisis_resources():
    """Provide immediate crisis resources"""
    return """
🚨 **Immediate Crisis Resources** 🚨

**If you're in immediate danger, please contact emergency services (911) or go to your nearest emergency room.**

**24/7 Crisis Support:**
• 🇺🇸 **988 Suicide & Crisis Lifeline**: Call or text 988
• 🌍 **Crisis Text Line**: Text HOME to 741741
• 🏳️‍🌈 **LGBTQ+ National Hotline**: 1-888-843-4564
• 💬 **SAMHSA National Helpline**: 1-800-662-4357

**Web3 Community Support:**
• Our community has crisis intervention protocols
• Anonymous peer support available 24/7
• Immediate connection to trained volunteers
• Blockchain-verified crisis response network

**Remember**: You are not alone. Our community is here for you, and professional help is available. Your life has value and meaning. 💙

*Crisis interventions are logged anonymously to help our community better serve those in need.*
"""

# ============================================================================
# GRADIO APP INTERFACE
# ============================================================================

# Custom CSS for better styling
custom_css = """
.gradio-container {
    max-width: 1200px !important;
}
.main-header {
    text-align: center;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 20px;
    border-radius: 10px;
    margin-bottom: 20px;
}
.metric-box {
    background: #f8f9fa;
    border-radius: 8px;
    padding: 15px;
    margin: 10px;
    border-left: 4px solid #4CAF50;
}
"""

with gr.Blocks(css=custom_css, title="3Therapy", theme=gr.themes.Soft()) as app:

    # Header
    gr.HTML("""
    <div class="main-header">
        <h1>🌸 3Therapy 🌸</h1>
        <p><strong>Decentralized Autonomous Organization for Mental Wellness</strong></p>
        <p>Privacy-First • Community-Driven • Blockchain-Powered • AI-Enhanced</p>
    </div>
    """)

    with gr.Tabs():

        # Tab 1: AI Therapy Chat
        with gr.TabItem("💬 AI Therapy Chat"):
            gr.Markdown("""
            ### Welcome to Your Personal AI Therapist

            This is a safe, judgment-free space powered by AI and secured by Web3 technology.
            Your conversations are private, and your participation helps build a stronger mental health community.

            **How it works:**
            - Share your thoughts and feelings openly
            - Receive compassionate, professional guidance
            - Earn wellness tokens for participation
            - Contribute to community healing metrics
            """)

            with gr.Row():
                with gr.Column(scale=2):
                    chatbot = gr.Chatbot(
                        label="AI Therapist",
                        height=400,
                        show_label=True,
                        avatar_images=["🧑‍💼", "🌸"],
                        bubble_full_width=False
                    )

                    with gr.Row():
                        sentiment_input = gr.Dropdown(
                            choices=["very_low", "low", "neutral", "good", "very_good"],
                            value="neutral",
                            label="How are you feeling right now?",
                            scale=1
                        )

                    msg_input = gr.Textbox(
                        label="Share your thoughts...",
                        placeholder="Tell me what's on your mind. I'm here to listen and help.",
                        lines=3,
                        max_lines=5
                    )

                    with gr.Row():
                        send_btn = gr.Button("Send Message", variant="primary")
                        clear_btn = gr.Button("Clear Chat", variant="secondary")

                with gr.Column(scale=1):
                    gr.Markdown("### 🆘 Crisis Resources")
                    crisis_btn = gr.Button("Get Crisis Resources", variant="stop")
                    crisis_output = gr.Markdown()

                    gr.Markdown("### 🎖️ Achievements")
                    achievement_btn = gr.Button("Mint Achievement NFT")
                    achievement_output = gr.Markdown()

        # Tab 2: Community Dashboard
        with gr.TabItem("📊 Community Dashboard"):
            gr.Markdown("""
            ### Web3 Mental Health Community Impact

            See how our decentralized mental health community is making a difference.
            All data is anonymous and aggregated to protect privacy while showing collective progress.
            """)

            with gr.Row():
                with gr.Column():
                    metrics_display = gr.Markdown()
                    metrics_btn = gr.Button("Refresh Community Metrics", variant="primary")

                with gr.Column():
                    wellness_chart = gr.Plot(label="Community Wellness Trend")
                    chart_btn = gr.Button("Update Trend Chart")

            gr.Markdown("""
            ### 🌟 Community Features

            - **Anonymous Impact Tracking**: Your participation contributes to community metrics without compromising privacy
            - **Wellness Token Economy**: Earn tokens for engagement, helping others, and personal growth
            - **Achievement NFTs**: Permanent blockchain records of your mental health journey milestones
            - **Collective Healing**: Individual progress contributes to community-wide wellness improvements
            - **Decentralized Governance**: Community members vote on platform improvements and resource allocation
            """)

        # Tab 3: Web3 Features
        with gr.TabItem("🔗 Web3 Features"):
            gr.Markdown("""
            ### Blockchain-Powered Mental Health Platform

            Our platform leverages Web3 technology to create a more equitable, private, and community-driven approach to mental health support.
            """)

            with gr.Row():
                with gr.Column():
                    gr.Markdown("""
                    #### 🔒 Privacy-First Design
                    - **Anonymous Identities**: Cryptographic hashes protect your identity
                    - **Decentralized Storage**: No central authority controls your data
                    - **Zero-Knowledge Proofs**: Prove participation without revealing personal information
                    - **User-Controlled Data**: You own and control your therapeutic journey records
                    """)

                    gr.Markdown("""
                    #### 💎 Wellness Token Economy
                    - **Participation Rewards**: Earn tokens for using the platform
                    - **Peer Support Incentives**: Get rewarded for helping others
                    - **Achievement Bonuses**: Milestone rewards for progress
                    - **Community Governance**: Vote on platform decisions with tokens
                    """)

                with gr.Column():
                    gr.Markdown("""
                    #### 🏆 Achievement NFT System
                    - **Permanent Records**: Blockchain-verified progress milestones
                    - **Privacy-Preserving**: Anonymous but verifiable achievements
                    - **Collectible Journey**: Build a portfolio of your growth
                    - **Community Recognition**: Celebrate progress with others
                    """)

                    gr.Markdown("""
                    #### 🌍 Decentralized Impact
                    - **Global Accessibility**: No geographic or financial barriers
                    - **Community Governance**: Democratic decision-making
                    - **Transparent Metrics**: Open-source impact measurement
                    - **Collective Ownership**: Community-owned mental health resources
                    """)

            gr.Markdown("""
            ### 🚀 Technical Innovation

            **Smart Contract Features:**
            - Anonymous session logging
            - Automated token distribution
            - Achievement verification
            - Community metric aggregation

            **Blockchain Benefits:**
            - Immutable progress records
            - Transparent community governance
            - Decentralized crisis response network
            - Global accessibility without intermediaries
            """)

    # Event handlers
    def respond(message, history, sentiment):
        if message.strip():
            bot_message = chat_with_ai(message, history, sentiment)
            history.append((message, bot_message))
        return history, ""

    send_btn.click(
        respond,
        inputs=[msg_input, chatbot, sentiment_input],
        outputs=[chatbot, msg_input]
    )

    msg_input.submit(
        respond,
        inputs=[msg_input, chatbot, sentiment_input],
        outputs=[chatbot, msg_input]
    )

    clear_btn.click(lambda: ([], ""), outputs=[chatbot, msg_input])

    metrics_btn.click(get_community_metrics, outputs=metrics_display)
    chart_btn.click(create_wellness_chart, outputs=wellness_chart)
    achievement_btn.click(mint_achievement, outputs=achievement_output)
    crisis_btn.click(get_crisis_resources, outputs=crisis_output)

    # Initialize dashboard
    app.load(get_community_metrics, outputs=metrics_display)
    app.load(create_wellness_chart, outputs=wellness_chart)

# ============================================================================
# LAUNCH APPLICATION
# ============================================================================

if __name__ == "__main__":
    print("🚀 Starting 3Therapy...")
    print("🔗 Blockchain integration active")
    print("🤖 AI therapist ready")
    print("🌍 Community dashboard initialized")

    # Launch with public sharing for demo
    app.launch(
        server_name="0.0.0.0",
        server_port=7860,
        share=True,  # Creates public link for demo
        debug=True,
        show_error=True
    )

